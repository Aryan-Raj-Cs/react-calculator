{"version":3,"sources":["App.js","logo.svg","Mydesign.js","serviceWorker.js","index.js"],"names":["App","props","calculate","state","val","res","flag","result","eval","err","setState","console","log","dis","v","clear","className","border","colspan","type","id","value","this","onClick","React","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.466571a6.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./cal.css\";\nimport {mydesign} from './Mydesign.js'\nclass App extends React.Component {\n  \n  constructor (props) {\n    super(props);\n   \n    this.state ={\n      val:'',\n      res:'hello aryan',\n      flag:false\n   \n   };\n  }\n   calculate=()=>{\n    const {val,res,flag}=this.state;\n    try {\n      var result=eval(val);\n    }\n    catch(err) {\n     result=\"wrong expression\"\n    }\n    \n    this.setState({res:result,flag:true,val:result});\n\n    console.log(this.state.res);\n  \n     }\n  \n  dis=(v)=>{\n  this.setState({val:this.state.val+v})\n  console.log(this.state.val);\n  }\n  \n  /**check=()=>{\n     if(this.state.flag){\n        return this.state.res;\n     }\n     else{\n        return this.state.val;\n     }\n  }*/\n\n  clear=()=>{\n   this.setState({val:'',res:'',flag:false}) \n  }\n render() {\n    return(\n      \n    <div className=\"App\">\n       \n      <center>\n     <mydesign/>\n     <table border=\"1\"> \n         <tr> \n            <td colspan=\"3\"><input type=\"text\" id=\"result\" value={this.state.val}/></td> \n          \n            <td><input type=\"button\" value=\"c\" onClick={this.clear} /> </td> \n         </tr> \n         <tr> \n          \n            <td><input type=\"button\" value=\"1\" onClick={() => this.dis('1')}/> </td> \n            <td><input type=\"button\" value=\"2\" onClick={() => this.dis('2')}/> </td> \n            <td><input type=\"button\" value=\"3\" onClick={() => this.dis('3')}/> </td> \n            <td><input type=\"button\" value=\"/\" onClick={() => this.dis('/')}/> </td> \n         </tr> \n         <tr> \n        \n          <td><input type=\"button\" value=\"4\" onClick={() => this.dis('4')}/> </td> \n          <td><input type=\"button\" value=\"5\" onClick={() => this.dis('5')}/> </td> \n          <td><input type=\"button\" value=\"6\" onClick={() => this.dis('6')}/> </td> \n          <td><input type=\"button\" value=\"-\" onClick={() => this.dis('-')}/> </td> \n       </tr> \n       <tr> \n          \n          <td><input type=\"button\" value=\"7\" onClick={() => this.dis('7')}/> </td> \n          <td><input type=\"button\" value=\"8\" onClick={() => this.dis('8')}/> </td> \n          <td><input type=\"button\" value=\"9\" onClick={() => this.dis('9')}/> </td> \n          <td><input type=\"button\" value=\"+\" onClick={() => this.dis('+')}/> </td> \n         \n       </tr> \n       <tr> \n          \n          <td><input type=\"button\" value=\".\" onClick={() => this.dis('.')}/> </td> \n          <td><input type=\"button\" value=\"0\" onClick={() => this.dis('0')}/> </td> \n          <td><input type=\"button\" value=\"*\" onClick={() => this.dis('*')}/> </td> \n          <td><input type=\"button\" value=\"=\" onClick={ this.calculate}/> </td> \n         \n       </tr> \n        \n      </table>\n      </center>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nexport default function mydesign(){\r\nreturn(\r\n\r\n<div>\r\n<h1>Aryan Calculator</h1>\r\n</div>\r\n\r\n)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}